// Code generated by MockGen. DO NOT EDIT.
// Source: internal/infrastructure/cache/cache.go
//
// Generated by this command:
//
//	mockgen -source=internal/infrastructure/cache/cache.go -destination=mocks/mock_cache.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	model "orderservice/internal/model"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCache is a mock of Cache interface.
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
	isgomock struct{}
}

// MockCacheMockRecorder is the mock recorder for MockCache.
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance.
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockCache) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockCacheMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockCache)(nil).Close))
}

// Get mocks base method.
func (m *MockCache) Get(orderUID string) (*model.Order, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", orderUID)
	ret0, _ := ret[0].(*model.Order)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCacheMockRecorder) Get(orderUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCache)(nil).Get), orderUID)
}

// Set mocks base method.
func (m *MockCache) Set(order *model.Order) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", order)
}

// Set indicates an expected call of Set.
func (mr *MockCacheMockRecorder) Set(order any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockCache)(nil).Set), order)
}

// SetupCache mocks base method.
func (m *MockCache) SetupCache(orders []*model.Order) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetupCache", orders)
}

// SetupCache indicates an expected call of SetupCache.
func (mr *MockCacheMockRecorder) SetupCache(orders any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetupCache", reflect.TypeOf((*MockCache)(nil).SetupCache), orders)
}
